-- @assert Bedroom__enoughBathroomsInPrestige OK

-- context self : Bedroom inv enoughBathroomsInPrestige :
-- At least as many bathrooms than beds for prestige residence.

-- open -q <BASE>.soil
-- here some mutation code

!create bat : Residence
!set bat.floorMin := 0
!set bat.floorMax := 2
!set bat.category := Category::prestige
!set bat.maxNbOfFreeUnits := 5
!set bat.name := 'hostel'

!create bedroom1 : Bedroom
!set bedroom1.floor := 2
!set bedroom1.isOutOfOrder := false
!set bedroom1.number := 200
!set bedroom1.nbOfSingleBeds := 1
!set bedroom1.nbOfDoubleBeds := 1
!set bedroom1.isNonSmoking := true
!set bedroom1.nbOfUnits := 3

!create bedroom2 : Bedroom
!set bedroom2.floor := 2
!set bedroom2.isOutOfOrder := false
!set bedroom2.number := 201
!set bedroom2.nbOfSingleBeds := 0
!set bedroom2.nbOfDoubleBeds := 1
!set bedroom2.isNonSmoking := true
!set bedroom2.nbOfUnits := 2

!create bathroom1 : Bathroom
!set bathroom1.floor := 2
!set bathroom1.isOutOfOrder := false
!set bathroom1.number := 201
!set bathroom1.isOnTheLanding := false

!create bathroom2 : Bathroom
!set bathroom2.floor := 2
!set bathroom2.isOutOfOrder := false
!set bathroom2.number := 200
!set bathroom2.isOnTheLanding := false

!create bathroom3 : Bathroom
!set bathroom3.floor := 2
!set bathroom3.isOutOfOrder := false
!set bathroom3.number := 200
!set bathroom3.isOnTheLanding := false

!insert (bat,bedroom1) into ContainsRooms
!insert (bat,bedroom2) into ContainsRooms
!insert (bat,bathroom1) into ContainsRooms
!insert (bat,bathroom2) into ContainsRooms
!insert (bat,bathroom3) into ContainsRooms
!insert (bathroom1,bedroom2) into IsInBedroom
!insert (bathroom2,bedroom1) into IsInBedroom
!insert (bathroom3,bedroom1) into IsInBedroom